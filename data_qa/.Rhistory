knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
#### install and load all packages ####
#devtools::install_github("https://github.com/cran/extracat")
library(readr)
library(dplyr)
library(tidyverse)
#library(mi)
library(extracat)
library(ggplot2)
#install.packages('choroplethr')
library(choroplethr)
#install.packages('maps')
library(maps)
#install.packages("Hmisc")
library(Hmisc)
library(viridis)
#install.packages("ggthemes")
#install.packages("mapproj")
library(ggthemes)
library(mapproj)
#### Write two functions one load raw data (load_data) and one split data (split_df) ####
load_data <- function(){
#### Load Yearly States Population ####
state_pop <- subset(read_csv('../data_clean/states_population.csv'), select= -X1)
#### Add STATE Abbreviation to state_pop ####
state_abb_name <- data.frame(abb = state.abb, name = state.name)
add_abb_name<-data.frame("DC","District of Columbia")
names(add_abb_name)<-c("abb","name")
state_abb_name<- rbind(state_abb_name,add_abb_name)
#### Load Prison Data ####
nat_prisoner <- read_tsv('../data_clean/37003-0001-Data.tsv')
#### Merge with State Population ####
df <- nat_prisoner %>% left_join(state_abb_name, by=c("STATE" = "abb")) %>% left_join(state_pop, by=c("name" = "name", "YEAR" = "year")) %>% rename(state_name = name)
return(df)
}
split_df<-function(df, type_of_missing=NA){
#### replace -9,-8,-2,-1 to NA ####
if(type_of_missing %in% c(-9,-8,-2,-1)){
df[is.na(df)] <- 'unknown'
df <- df %>% mutate_all(~na_if(., type_of_missing))
}
#### Survey entity columns ####
key_cols <- c('YEAR','STATEID','STATE','REGION','state_name','Population')
major_info <- df[,key_cols]
#### df1 ####
custody_jurisdiction_inmates_stats <- cbind(major_info, df[,grep("CUSGT1M", colnames(df)):grep("FACROWDF", colnames(df))],
df[,grep("CUSLT18M", colnames(df)):grep("CUSCTZNF", colnames(df))])
#### df2 ####
race_info <- cbind(major_info, df[, grep("WHITEM", colnames(df)):grep("TOTHCATF", colnames(df))])
#COMMITM:PARNOF
#### df3 ####
admission_info <- cbind(major_info, df[, grep("ADCRNEWM", colnames(df)):grep("ADTOTF", colnames(df))])
#HANDLEM:HANDLEF
#### df4 ####
release_info <- cbind(major_info, df[, grep("RLUNEXPM", colnames(df)):grep("RLTOTF", colnames(df))])
#FLOJANM:FLODECF
#### df5 ####
facility_info <- cbind(major_info, df[, grep("CAPRATEM", colnames(df)):grep("CAPDEST", colnames(df))])
#### df6 ####
death_info <- cbind(major_info, df[, grep("DTHEXECM", colnames(df)):grep("DTHTOTF", colnames(df))])
return(list(custody_jurisdiction_inmates_stats=custody_jurisdiction_inmates_stats, race_info=race_info, admission_info=admission_info, release_info=release_info, facility_info=facility_info, death_info=death_info))
}
###load raw data and merge them ###
df <- load_data()
###split data ###
sub_dfs<- split_df(df)
###get split dfs ###
custody_jurisdiction_inmates_stats<- sub_dfs$custody_jurisdiction_inmates_stats
race_info<- sub_dfs$race_info
admission_info<- sub_dfs$admission_info
release_info<- sub_dfs$release_info
facility_info<- sub_dfs$facility_info
death_info<- sub_dfs$death_info
# col_n_distinct_values<- nat_prisoner %>% summarise_all(n_distinct)
# unique(nat_prisoner$REGION )
# col_n_distinct_values
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
###filling missing values for raw df ###
df <- df %>%
mutate(state_name = ifelse(STATEID == 60, 'State prison total',ifelse(STATEID == 70, 'US prison total (state+federal)', ifelse(STATEID==99, 'Federal BOP', state_name))))%>%
mutate(REGION = ifelse((is.na(REGION) & STATEID==31), 2, REGION))
###re-process split data ###
sub_dfs<- split_df(df)
###get split dfs ###
custody_jurisdiction_inmates_stats<- sub_dfs$custody_jurisdiction_inmates_stats
race_info<- sub_dfs$race_info
admission_info<- sub_dfs$admission_info
release_info<- sub_dfs$release_info
facility_info<- sub_dfs$facility_info
death_info<- sub_dfs$death_info
###re-process split with type -9 missing ###
df_n9 <- split_df(df, type_of_missing = -9)
custody_jurisdiction_inmates_stats<- df_n9$custody_jurisdiction_inmates_stats
race_info<- df_n9$race_info
admission_info<- df_n9$admission_info
release_info<- df_n9$release_info
facility_info<- df_n9$facility_info
death_info<- df_n9$death_info
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
###re-process split with type -8 missing ###
df_n8 <- split_df(df, type_of_missing = -8)
custody_jurisdiction_inmates_stats<- df_n8$custody_jurisdiction_inmates_stats
race_info<- df_n8$race_info
admission_info<- df_n8$admission_info
release_info<- df_n8$release_info
facility_info<- df_n8$facility_info
death_info<- df_n8$death_info
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
###re-process split with type -2 missing ###
df_n2 <- split_df(df, type_of_missing = -2)
custody_jurisdiction_inmates_stats<- df_n2$custody_jurisdiction_inmates_stats
race_info<- df_n2$race_info
admission_info<- df_n2$admission_info
release_info<- df_n2$release_info
facility_info<- df_n2$facility_info
death_info<- df_n2$death_info
visna(custody_jurisdiction_inmates_stats, sort = "b")
#visna(race_info, sort = "b") ## no NAs in this data
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
#visna(death_info, sort = "b") ## no NAs in this data
###re-process split with type -1 missing ###
df_n1 <- split_df(df, type_of_missing = -1)
custody_jurisdiction_inmates_stats<- df_n1$custody_jurisdiction_inmates_stats
race_info<- df_n1$race_info
admission_info<- df_n1$admission_info
release_info<- df_n1$release_info
facility_info<- df_n1$facility_info
death_info<- df_n1$death_info
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
df_final <- df %>%
mutate_all(~na_if(., -9)) %>%
mutate_all(~na_if(., -8)) %>%
mutate_all(~na_if(., -2)) %>%
mutate_all(~na_if(., -1))
###re-process split data ###
sub_dfs<- split_df(df_final)
###get split dfs ###
custody_jurisdiction_inmates_stats<- sub_dfs$custody_jurisdiction_inmates_stats
race_info<- sub_dfs$race_info
admission_info<- sub_dfs$admission_info
release_info<- sub_dfs$release_info
facility_info<- sub_dfs$facility_info
death_info<- sub_dfs$death_info
#### Function to stack Male Female and Total for same variable ####
stack_mft<- function(df){
m_cols<- c("YEAR","STATEID","STATE","REGION","state_name","Population",names(df)[grepl("M$" , names(df))])
f_cols<- c("YEAR","STATEID","STATE","REGION","state_name","Population",names(df)[grepl("F$" , names(df))])
t_cols<- c("YEAR","STATEID","STATE","REGION","state_name","Population",names(df)[grepl("T$" , names(df))])
df_m <- df[m_cols]
df_m$gender <- "M"
colnames(df_m)[grepl("M$" , names(df_m))] <- str_sub(colnames(df_m)[grepl("M$" , names(df_m))], 1,-2)
df_f <- df[f_cols]
df_f$gender <- "F"
colnames(df_f)[grepl("F$" , names(df_f))] <- str_sub(colnames(df_f)[grepl("F$" , names(df_f))], 1,-2)
df_t <- df[t_cols]
df_t$gender <- "T"
colnames(df_t)[grepl("T$" , names(df_t))] <- str_sub(colnames(df_t)[grepl("T$" , names(df_t))], 1,-2)
melted_df<- bind_rows(df_m, df_f, df_t)
#melted_df<- melted_df[,c("YEAR","STATEID","STATE","REGION","state_name","Population", "gender")
return(melted_df)
}
#### function to sum F and M ####
sum_FM<- function(df){
t_cols<- sort(colnames(df)[grepl("T$" , names(df))])
df <- df %>% select(-t_cols)
m_cols<- sort(colnames(df)[grepl("M$" , names(df))])
f_cols<- sort(colnames(df)[grepl("F$" , names(df))])
for (i in 1:length(m_cols)){
#print(i)
new_name <- str_sub(m_cols[[i]],1,-2)
df[new_name] <- rowSums(df[,c(m_cols[[i]], f_cols[[i]])], na.rm=TRUE)
}
df <- df %>% select(-c(m_cols,f_cols))
return(df)
}
###select columns of interest (since the study focus is on jurisdiction count)
inmates_long <- stack_mft(custody_jurisdiction_inmates_stats) %>% select(-c('STATEID','CUSGT1','CUSLT1','CUSUNS','CUSTOT','CNOPRIV','CWPRIV',"JURGT1","JURLT1", "JURUNS", "CUSLT18","CUSCTZN","LFCRST"))
inmates_FM <- sum_FM(custody_jurisdiction_inmates_stats) %>%
select(-c('STATEID','CUSGT1','CUSLT1','CUSUNS','CUSTOT','CNOPRIV','CWPRIV',"JURGT1","JURLT1", "JURUNS", "CUSLT18","CUSCTZN","LFCRST"))
##Total number of inmates under your jurisdiction##
ggplot(inmates_long, aes(YEAR, JURTOT, color=gender)) +
geom_point(size=0.05) +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
#PVIN
##On December 31, how many inmates under your jurisdiction were housed in a privately-operated correctional facility -- Exclude inmates housed in any publicly-operated facility, even if under contract. Include inmates housed in any privately-operated halfway houses, treatment facilities, hospitals, or other special facilities.
##a. In your state - Male
ggplot(inmates_long, aes(YEAR, PVIN, color=gender)) +
geom_point(size=0.05) +
#stat_smooth() +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
#### get state map geo data with longitude and latitude ####
us_states <- map_data('state')%>% mutate(state_name = capitalize(region)) %>%  select(-c(region, subregion))
#### join to inmates data ####
inmates_long_map <- left_join(us_states,inmates_long, by='state_name')
inmates_FM_map <- left_join(us_states,inmates_FM, by='state_name')
### feed in map ###
ggplot(inmates_FM_map, mapping = aes(x=long, y=lat, group=group, fill=JURTOT)) +
geom_polygon(color = "gray90", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_viridis_c(option = "plasma") +
theme_map() + facet_wrap(~ YEAR, ncol = 6) +
theme(legend.position = "bottom",
strip.background = element_blank()) +
labs(fill = "Total number of inmates under jurisdiction",
title = "Total number of inmates under jurisdiction by State by Year")
library(r2d3)
r2d3("hw4q4b.js", data=c(91, 15, 147, 184))
library(reshape2)
names(race_info)
race_long <- stack_mft(race_info)
race_longer <-reshape2::melt(race_long %>% select(-c(TOTRACE,NOTHISP,UNKHISP,TOTHCAT)), id = c("YEAR","STATEID","STATE","REGION","state_name","Population", "gender"),  variable = "race", value.name = "inmates_count", na.rm= TRUE)
ggplot(race_longer %>% group_by(YEAR,state_name, race) %>% summarise(inmates_count= sum(inmates_count)), aes(YEAR, inmates_count, color=race)) +
geom_point(size=0.5) +
#stat_smooth() +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
View(facility_info)
facility_long <- stack_mft(facility_info)
# CAPRATE
# On December 31, what was the capacity of your prison system?
# a. Rated capacity (The number of beds or inmates assigned by rating officials to institutions within your jurisdiction)
ggplot(facility_long, aes(YEAR, CAPRATE, color=gender)) +
geom_point(size=0.05) +
#stat_smooth() +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
# CAPOP
# On December 31, what was the capacity of your prison system?
# b. Operational capacity (The number of inmates that can be accommodated based on staff, existing programs, and services in institutions within your jurisdiction)
ggplot(facility_long, aes(YEAR, CAPOP, color=gender)) +
geom_point(size=0.05) +
#stat_smooth() +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
#CAPDES
# On December 31, what was the capacity of your prison system?
# c. Design capacity (The number of inmates that planners or architects intended for all institutions within your jurisdiction)
ggplot(facility_long, aes(YEAR, CAPDES, color=gender)) +
geom_point(size=0.05) +
#stat_smooth() +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
install.packages("corrplot")
install.packages('corrgram')
library(corrplot)
library(corrgram)
custody_jurisdiction_inmates_stats %>%
summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(custody_inmates_long %>% select(-c('STATEID','STATE','REGION','LFCRST','LFCRST','LFCRINC','LFCRINC'))),type = "upper")
custody_jurisdiction_inmates_stats %>%
summarise_all(funs(var), na.rm = TRUE)
# custody_jurisdiction_inmates_stats %>%
#   summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(inmates_long %>% select(-c('STATEID','STATE','REGION','LFCRST','LFCRST','LFCRINC','LFCRINC'))),type = "upper")
# custody_jurisdiction_inmates_stats %>%
#   summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(inmates_long %>% select(-c('STATE','REGION','LFCRST','LFCRST','LFCRINC','LFCRINC'))),type = "upper")
# custody_jurisdiction_inmates_stats %>%
#   summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(inmates_long %>% select(-c('STATE','REGION','LFCRST','LFCRINC','LFCRINC'))),type = "upper")
# custody_jurisdiction_inmates_stats %>%
#   summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(inmates_long %>% select(-c('STATE','REGION','LFCRINC','LFCRINC'))),type = "upper")
# facility_long %>%
#   summarise_all(funs(var), na.rm = TRUE)
corrplot(corrgram(facility_long %>% select(-c('STATEID','STATE','REGION','state_name'))),type = "upper")
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
visna(custody_jurisdiction_inmates_stats, sort = "b")
visna(race_info, sort = "b")
visna(admission_info, sort = "b")
visna(release_info, sort = "b")
visna(facility_info, sort = "b")
visna(death_info, sort = "b")
```{r fig.heigh=5, fig.weight=10}
##Total number of inmates under your jurisdiction##
ggplot(inmates_long, aes(YEAR, JURTOT, color=gender)) +
geom_point(size=0.05) +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
```{r fig.heigh=5, fig.width=10}
##Total number of inmates under your jurisdiction##
ggplot(inmates_long, aes(YEAR, JURTOT, color=gender)) +
geom_point(size=0.05) +
facet_wrap(~state_name,scales = "free_y")+
theme(axis.text.x = element_text(angle = 90))
### feed in map ###
ggplot(inmates_FM_map, mapping = aes(x=long, y=lat, group=group, fill=JURTOT)) +
geom_polygon(color = "gray90", size = 0.1) +
coord_map(projection = "albers", lat0 = 39, lat1 = 45) +
scale_fill_viridis_c(option = "heat") + #plasma
theme_map() + facet_wrap(~ YEAR, ncol = 6) +
theme(legend.position = "bottom",
strip.background = element_blank()) +
labs(fill = "Total number of inmates under jurisdiction",
title = "Total number of inmates under jurisdiction by State by Year")
